type Query {
    info: String!
}

type Mutation {
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
    createOrganization(data: OrganizationCreateInput!): Organization!
    updateOrganization(data:OrganizationUpdateInput!,where:OrganizationWhereUniqueInput!):Organization!
    deleteOrganization(where: OrganizationWhereUniqueInput): Organization!
}

enum roles {
  Developer
  Mentor
  Admin
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String!
  password: String
  isVerified: Boolean
  session: String
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  mobileNumber: String
}

input UserWhereUniqueInput {
  id: ID
  githubHandle: String
}

type Organization  {
  id: ID!
  orgName: String!
  orgSlug: String!
  orgDesc: String
  githubUrl: String
}

input OrganizationCreateInput {
  id: ID
  orgName: String!
  orgSlug: String!
  orgDesc: String
  githubUrl: String
}


input OrganizationUpdateInput{
  orgDesc: String
}

input OrganizationWhereUniqueInput{
  id: ID
  orgSlug: String
  githubUrl: String
}
