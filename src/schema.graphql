type Query {
  info: String!
  userProfile: User!
  users(where: UserWhereInput): [User]!
  projects(where: ProjectWhereInput): [Project]!
  organizations(where: OrganizationWhereInput): [Organization]!
  mentors(where: MentorWhereInput): [Mentor]!
  userProposals: [Proposal]!
  proposals(where: ProposalWhereInput): [Proposal]!
  projectsConnection(where: ProjectWhereUniqueInput): ProjectConnection!
}

type Mutation {
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(
    data: ProjectUpdateInput!
    where: ProjectWhereUniqueInput!
  ): Project
  deleteProject(where: ProjectWhereUniqueInput!): Project
  createProposal(data: ProposalCreateInput!): Proposal!
  updateProposal(
    data: ProposalUpdateInput!
    where: ProposalWhereUniqueInput!
  ): Proposal
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(
    data: OrganizationUpdateInput!
    where: OrganizationWhereUniqueInput!
  ): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput): Organization!
  updateMentor(data: MentorUpdateInput!, where: MentorWhereUniqueInput!): Mentor
  createMentor(data: MentorCreateInput!): Mentor!
  deleteMentor(where: MentorWhereUniqueInput!): Mentor
  fileUpload(file: Upload!): File! 
}

input UserWhereUniqueInput {
  id: ID
  email: String
  mobileNumber: String
  githubHandle: String
}

input ProjectWhereUniqueInput {
  id: ID
  projSlug: String
  organization: OrganizationWhereUniqueInput
}

input OrganizationWhereUniqueInput {
  id: ID
  orgSlug: String
  githubUrl: String
}

input MentorWhereUniqueInput {
  id: ID
}

input ProposalWhereUniqueInput {
  id: ID
}

input UserUpdateInput {
  firstName: String
  lastName: String
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String
  password: String
  isVerified: Boolean
  session: String
}

input ProjectCreateInput {
  id: ID
  projName: String!
  projSlug: String!
  projDesc: String
  githubUrl: String
  organization: OrganizationCreateOneInput!
}

input OrganizationCreateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input ProjectUpdateInput {
  projName: String
  projSlug: String
  projDesc: String
  githubUrl: String
  organization: OrganizationUpdateOneRequiredInput
}

input OrganizationUpdateOneRequiredInput {
  update: OrganizationUpdateInput
  connect: OrganizationWhereUniqueInput
}

input ProposalCreateInput {
  id: ID
  isAccepted: Boolean
  propUrl: String!
  user: UserCreateOneInput!
  project: ProjectCreateOneInput!
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProposalUpdateInput {
  isAccepted: Boolean
  propUrl: String
  user: UserUpdateOneRequiredInput
  project: ProjectUpdateOneRequiredInput
}

input OrganizationCreateInput {
  id: ID
  orgName: String!
  orgSlug: String!
  orgDesc: String
  githubUrl: String
}

input OrganizationUpdateInput {
  orgName: String
  orgSlug: String
  orgDesc: String
  githubUrl: String
}

input MentorUpdateInput {
  user: UserUpdateOneRequiredInput
  project: ProjectUpdateOneRequiredInput
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  update: UserUpdateInput
}

input ProjectUpdateOneRequiredInput {
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateInput
}

input MentorCreateInput {
  id: ID
  user: UserCreateOneInput!
  project: ProjectCreateOneInput!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String!
  password: String
  isVerified: Boolean
  session: String
}

enum roles {
  Dev
  Mentor
  Admin
}

type Project {
  id: ID!
  organization: Organization!
  projName: String!
  projSlug: String!
  projDesc: String
  githubUrl: String
}

type Organization {
  id: ID!
  orgName: String!
  orgSlug: String!
  orgDesc: String
  githubUrl: String
}

type Mentor {
  id: ID!
  user: User!
  project: Project!
}

type Proposal {
  id: ID!
  user: User!
  project: Project!
  isAccepted: Boolean!
  propUrl: String!
}

input UserWhereInput {
  id: ID
  firstName: String
  lastName: String
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String
  password: String
  isVerified: Boolean
  session: String
}

input ProjectWhereInput {
  id: ID
  organization: OrganizationWhereInput
  projName: String
  projSlug: String
  projDesc: String
  githubUrl: String
}

input ProposalWhereInput {
  id: ID
  user: UserWhereInput
  project: ProjectWhereInput
  isAccepted: Boolean
  propUrl: String
}

input MentorWhereInput {
  id: ID
  user: UserWhereInput
  project: ProjectWhereInput
}

input OrganizationWhereInput {
  id: ID
  orgName: String
  orgSlug: String
  orgDesc: String
  githubUrl: String
}

type AggregateProject {
  count: Int!
}

type ProjectConnection {
  aggregate: AggregateProject!
}
